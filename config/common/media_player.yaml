
audio_dac:
  - platform: pcm5122
    id: line_out_dac
    address: 0x4D
  - platform: tas2780
    id: speaker_dac
    address: 0x3F
  - platform: satellite1
    id: dac_proxy
    speaker_dac: speaker_dac
    line_out_dac: line_out_dac
    
    on_line_out_activated:
        # if line_out was used previously but is not available try speaker
        - lambda: |
            if( !id(line_out_sensor).state ){
              id(dac_proxy).activate_speaker();
            }
    
    on_state_change:
      - media_player.volume_set:
          volume: !lambda return id(dac_proxy).volume();
      - lambda: |
           if( id(dac_proxy).is_muted() ){
              id(external_media_player)->make_call()
                .set_command(MEDIA_PLAYER_COMMAND_MUTE)
                .perform();
           }

select:
  - platform: template
    name: Speaker channel output
    id: tas_mode_select
    icon: "mdi:speaker-multiple"
    options:
     - "Mono (Left + Right)"
     - "Left Channel Only"
     - "Right Channel Only"
    initial_option: "Mono (Left + Right)"
    entity_category: config
    optimistic: true
    restore_value: true
    on_value:
      - tas2780.update_config:
          channel: !lambda |-
            auto index = id(tas_mode_select).active_index();
            if (index.has_value()){
              return index.value();
            }
            ESP_LOGI("main", "No channel selected");
            return 0;


binary_sensor:
  - platform: gpio
    id: line_out_sensor
    pin:
      pcm5122: 
      pin: 4
      inverted: false
    name: "Line-Out Connected"
    icon: "mdi:audio-input-stereo-minijack"
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    
    on_press:
      - dac_proxy.activate_line_out:
      - lambda: id(jack_plugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(jack_connected_sound);
      - delay: 800ms
      - lambda: id(jack_plugged_recently) = false;
      - script.execute: control_leds
      
    
    on_release:
      - dac_proxy.activate_speaker:
      - lambda: id(jack_unplugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(jack_disconnected_sound);
      - delay: 800ms
      - lambda: id(jack_unplugged_recently) = false;
      - script.execute: control_leds


fusb302b:
  id: pd_fusb302b
  irq_pin: GPIO1
  request_voltage: 20
  on_power_ready:
    then:
      - logger.log: 
          format: "PD contract got accepted: %s"
          args: [ 'id(pd_fusb302b).contract.c_str()' ]

      - text_sensor.template.publish:
          id: pd_state_text
          state: !lambda 'return id(pd_fusb302b).contract;'
      - if:
          condition:
            lambda: |-
              return id(pd_fusb302b).contract_voltage >= 9;
          then:
            - tas2780.activate:
                mode: 2
          else:
            - tas2780.activate:
                mode: 0
speaker:
  - platform: i2s_audio
    id: i2s_audio_speaker
    sample_rate: 48000
    i2s_dout_pin: GPIO9
    bits_per_sample: 32bit
    i2s_audio_id: i2s_shared
    dac_type: external
    channel: stereo
    timeout: never
    audio_dac: dac_proxy
    #buffer_duration: 100ms

# Virtual speakers to combine the announcement and media streams together into one output
  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never
        buffer_duration: 100ms

  # Vritual speakers to resample each pipelines' audio, if necessary, as the mixer speaker requires the same sample rate
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

snapcast:
  id: snapcast_client

media_player:
  - platform: speaker
    id: external_media_player
    name: Sat1 Media Player
    internal: false
    volume_increment: 0.05
    volume_min: 0.1
    volume_max: 1.
    snapcast: snapcast_client
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 1  # Stereo audio is unnecessary for announcements
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 2
      sample_rate: 48000
    
    on_mute:
      - script.execute: control_leds
    on_unmute:
      - script.execute: control_leds
    on_volume:
      - script.execute: control_leds
    
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
    
    on_state:
      if:
        condition:
          and:
            - switch.is_off: timer_ringing
            - not:
                voice_assistant.is_running:
            - not:
                media_player.is_announcing:
        then:
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 0
              duration: 1.0s

    files:
      - id: center_button_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_press.flac
      - id: center_button_double_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_double_press.flac
      - id: center_button_triple_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_triple_press.flac
      - id: center_button_long_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_long_press.flac
      - id: factory_reset_initiated_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_initiated.mp3
      - id: factory_reset_cancelled_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_cancelled.mp3
      - id: mute_switch_on_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_on.flac
      - id: mute_switch_off_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_off.flac
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac
      - id: jack_connected_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_connected.flac
      - id: jack_disconnected_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_disconnected.flac    


script:
  # Script executed when we want to play sounds on the device.
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(external_media_player)
              ->play_file(sound_file, true, false);
          }
  
  # Script to increased/decreased volume  
  - id: control_volume
    mode: restart
    parameters:
      increase_volume: bool  # True: Increase volume / False: Decrease volume.
    then:
      - delay: 16ms
      - if:
          condition:
            lambda: return increase_volume;
          then:
            - media_player.volume_up:
          else:
            - media_player.volume_down:
      - script.execute: control_leds
      - delay: 2s
      - lambda: id(volume_buttons_touched) = false;
      - script.execute: control_leds