substitutions:
  #Change to any preferred name
  friendly_name: "Satellite1"  

  #Change to calibrate your temperature/humidity sensor readings
  temp_offset: "-3"
  humidity_offset: "5"

  #Recommend leaving the following unchanged
  node_name: satellite1
  company_name: FutureProofHomes
  project_name: Satellite1
  component_name: Core
  
  esp32_fw_version: dev
  xmos_fw_version: "v1.0.3"


globals:
  # Global initialisation variable. Initialized to true and set to false once everything is connected. Only used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  # Global variable storing if user action causes warning
  - id: warning
    type: bool
    restore_value: no
    initial_value: 'false'
  # Global variable tracking the XMOS flasher status.
  - id: xmos_flashing_state
    type: int
    restore_value: no
    initial_value: '0'


esphome:
  name: ${node_name}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  min_version: 2025.5.2
  
  project:
    name: ${company_name}.${project_name}
    version: ${esp32_fw_version}
  
  on_boot:
    - priority: 375
      then:
        - logger.log: "${company_name} ${project_name} ${component_name} running ESP firmware: ${esp32_fw_version} and XMOS firmware: ${xmos_fw_version}"
        # Run the script to refresh the LED status
        - script.execute: control_leds
        - delay: 1s
        
        # If after 10 minutes, the device is still initializing (It did not yet connect to Home Assistant), turn off the init_in_progress variable and run the script to refresh the LED status
        - delay: 10min
        - if:
            condition:
              lambda: return id(init_in_progress);
            then:
              - lambda: id(init_in_progress) = false;
              - script.execute: control_leds

ota:
  - platform: esphome
    id: ota_esphome

dashboard_import:
  package_import_url: github://futureproofhomes/satellite1-esphome/config/satellite1.dashboard.yaml@develop
  import_full_config: true


packages:
  core_board: !include common/core_board.yaml
  wifi: !include common/wifi_improv.yaml
  sensors: !include common/hat_sensors.yaml
  buttons: !include common/buttons.yaml
  ha: !include common/home_assistant.yaml
  mp: !include common/media_player.yaml
  va: !include common/voice_assistant.yaml
  timer: !include common/timer.yaml
  led_ring: !include common/led_ring.yaml 
    
  ## OPTIONAL COMPONENTS 
  # mmwave_ld2410: !include common/mmwave_ld2410.yaml
  # mmwave_ld2450: !include common/mmwave_ld2450.yaml
  # debug: !include common/debug.yaml
  # developer: !include common/developer.yaml

http_request:

safe_mode:

status_led:
  pin:
    number: GPIO45
    ignore_strapping_warning: true


satellite1:
  id: satellite1_id
  spi_id: spi_0
  cs_pin: GPIO10
  data_rate: 8000000
  spi_mode: MODE3
  xmos_rst_pin: GPIO4
  
  on_xmos_no_response:
    then:
      - text_sensor.template.publish:
          id: xmos_firmware_version_text
          state: !lambda 'return id(satellite1_id).status_string();'
  
  on_xmos_connected:
    then:
      - text_sensor.template.publish:
          id: xmos_firmware_version_text
          state: !lambda 'return id(satellite1_id).status_string();'
      

memory_flasher:
  - platform: satellite1
    id: xflash
    embed_flash_image:
      image_version: ${xmos_fw_version}
      image_file: https://raw.githubusercontent.com/FutureProofHomes/Documentation/refs/heads/main/assets/firmware/xmos/${xmos_fw_version}/satellite1_firmware_fixed_delay.factory.bin
      md5_file: https://raw.githubusercontent.com/FutureProofHomes/Documentation/refs/heads/main/assets/firmware/xmos/${xmos_fw_version}/satellite1_firmware_fixed_delay.factory.md5

    on_flashing_start:    
      then:
        - lambda: id(xmos_flashing_state) = 1;
        - script.execute: control_leds
    
    on_progress_update:
      then:
        - lambda: id(global_led_animation_index) = id(xflash).flashing_progress * 24 / 100;
        - script.execute: control_leds
    
    on_flashing_success:
      then:
        - logger.log: "success called"
        - lambda: id(xmos_flashing_state) = 2;
        - script.execute: control_leds
        - lambda: id(xmos_flashing_state) = 0;
        - if:
            condition:
              lambda: |-
                return id(pd_fusb302b).contract_voltage >= 9;
            then:
              - tas2780.activate:
                  mode: 2
            else:
              - tas2780.activate:
                  mode: 0

    on_flashing_failed:
      then:
        - logger.log: "failed called"
        - lambda: id(xmos_flashing_state) = 3;
        - script.execute: control_leds
        - lambda: id(xmos_flashing_state) = 0;
    
    on_erasing_done:
      then:
        - if:
            condition: 
              lambda: return id(factory_reset_requested);
            then:
              - button.press: factory_reset_button

